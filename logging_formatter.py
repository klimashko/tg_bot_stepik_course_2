#%(asctime)s - время создания лога в виде, понятном человеку. По умолчанию выглядит так - 2023-12-31 11:29:31,689
#%(filename)s - имя модуля, в котором сработал вызов лога
#%(funcName)s - имя функции, в которой произошел вызов лога
#%(levelname)s - уровень, на котором был вызван данный лог (DEBUG, INFO и т.п.)
#%(lineno)d - номер строки кода, на которой произошел вызов лога
#%(name)s - имя логгера
#%(message)s - сообщение, которое должно быть выведено вместе с логом

#Самый простой способ - указать форматирование один раз при базовой конфигурации логирования, например, в точке входа в проект:

import logging

logging.basicConfig(
    level=logging.DEBUG,
    # format='[%(asctime)s] #%(levelname)-8s %(filename)s'
    # '%(lineno)d - %(name)s - %(message)s'
    #С фигурными скобками нагляднее, проще запись
    format='[{asctime}] #{levelname:8} {filename}:'
           '{lineno} - {name} - {message}',
    style='{'
)

logger = logging.getLogger(__name__)
logger.debug('Лог уровня DEBUG')

# В верхнем примере мы задали формат логов через определение базовой конфигурации в basicConfig, у нас единый формат для всех логов.
# А что если мы хотим разные форматы для разных случаев?
# Вы легко можете определить разные способы форматирования в вашем проекте и легко подключать их в нужных вам местах.
# За это отвечают форматтеры. Специальные объекты класса Formatter, в которых вы и можете хранить
# настройки форматирования для разных случаев.  В общем случае, форматтеры можно создавать так:

import logging

format_1 = '#%(levelname)-8s [%(asctime)s] - %(filename)s:'\
           '%(lineno)d - %(name)s - %(message)s'
format_2 = '[{asctime}] #{levelname:8} {filename}:'\
           '{lineno} - {name} - {message}'

formatter_1 = logging.Formatter(fmt=format_1)
formatter_2 = logging.Formatter(fmt=format_2, style='{')

#Работают форматтеры совместно с хэндлерами, поэтому конкретные примеры покажу в следующих шагах урока,
# после того, как расскажу про хэндлеры.